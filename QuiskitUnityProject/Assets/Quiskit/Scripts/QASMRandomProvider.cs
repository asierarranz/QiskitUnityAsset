using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class QASMRandomProvider : MonoBehaviour {

    private static readonly string _qasmSingleBoolCode = "include \"qelib1.inc\"; qreg q[1]; creg c[1]; h q[0]; measure q[0] -> c[0];";
    private static string _qasmFourBitCode = "";

    [Header("Optional")]
    public QASMSession specificSession = null;

    private QASMSession executionSession => specificSession ?? QASMSession.instance;

    public delegate void OnRandomBoolGenerated(bool generated);
    public delegate void OnRandomByteGenerated(byte generated);
    public delegate void OnRandomIntGenerated(int generated);
    public delegate void OnRandomFloatGenerated(float generated);

    public void GenerateBool(OnRandomBoolGenerated onRandomBoolGenerated) {
        executionSession.ExecuteCode(_qasmSingleBoolCode, (response) => {
            if (response.result.ContainsKey(1) && response.result[1] > 512) {
                onRandomBoolGenerated(true);
            } else {
                onRandomBoolGenerated(false);
            }
        });
    }

    public void GenerateByte(OnRandomByteGenerated onRandomByteGenerated) {
        if (_qasmFourBitCode == "") {
            _qasmFourBitCode = RandomNRegisterCode(4);
        }

        executionSession.ExecuteCode(_qasmFourBitCode, (response1) => {
            executionSession.ExecuteCode(_qasmFourBitCode, (response2) => {
                byte rnd2 = (byte)(response2.maxKey + (response1.maxKey << 4));
                onRandomByteGenerated(rnd2);
            });
        });
    }

    public void GenerateInt16(OnRandomIntGenerated onRandomIntGenerated) {
        GenerateByte((b1) => {
            GenerateByte((b2) => onRandomIntGenerated(b1 + (b2 << 8)));
        });
    }

    public void GenerateInt32(OnRandomIntGenerated onRandomIntGenerated) {
        GenerateInt16((i1) => {
            GenerateInt16((i2) => onRandomIntGenerated(i1 + (i2 << 16)));
        });
    }

    public void GenerateFloat(OnRandomFloatGenerated onRandomFloatGenerated) {
        GenerateInt32((i) => {
            onRandomFloatGenerated(Mathf.Abs((float)i / int.MaxValue));
        });
    }

    private string RandomNRegisterCode(int n) {
        if (n > executionSession.maxQubitAvailable) {
            throw new System.Exception("Requesting more qubits than Available");
        }

        // Header
        string qasmCode = "include \"qelib1.inc\";";

        // Registers
        qasmCode += $"qreg q[{n}]; creg c[{n}];";

        // Circuit
        for (int i = 0; i < n; i++) {
            qasmCode += $"h q[{i}];";
        }
        for (int i = 0; i < n; i++) {
            qasmCode += $"measure q[{i}] -> c[{i}];";
        }

        return qasmCode;
    }

#if UNITY_EDITOR
    [ContextMenu("Generate Bool")]
    private void TryGenerateBool() {
        GenerateBool((b) => Debug.Log($"Generated bool: {b}"));
    }
    [ContextMenu("Generate Byte")]
    private void TryGenerateByte() {
        GenerateByte((b) => Debug.Log($"Generated byte: {b}"));
    }
    [ContextMenu("Generate Int16")]
    private void TryGenerateInt16() {
        GenerateInt16((b) => Debug.Log($"Generated int16: {b}"));
    }
    [ContextMenu("Generate Int32")]
    private void TryGenerateInt32() {
        GenerateInt32((b) => Debug.Log($"Generated int32: {b}"));
    }
    [ContextMenu("Generate Float")]
    private void TryGenerateFloat() {
        GenerateFloat((b) => Debug.Log($"Generated float: {b}"));
    }
#endif

}
